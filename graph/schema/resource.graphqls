scalar Uint64

type User {
  id: ID!
  name: String!
  email: String!
  created_at: String!
}

type Post {
  id: ID!
  title: String!
  content: String!
  user_id: ID!

  user: User!
}

type Comment {
  id: ID!
  user_id: ID!
  content: String!

  user: User!
}

type Wallet {
  amount: Float!
  created_at: String!
  updated_at: String!
}

enum WalletEventType {
  UNSPECIFIED
  SYSTEM
  DEPOSIT
  WITHDRAW
  SPOT_ORDER
}

type WalletEvent {
  id: ID!
  user_id: ID!
  order_id: ID!
  type: WalletEventType!
  time: String!
  change: Float!
  memo: String!
}


enum DepositStatus {
  UNSPECIFIED
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELED
}

type DepositOrder {
  id: ID!
  user_id: ID!
  status: DepositStatus!
  amount: Float!
  memo: String!
  created_at: String!
  updated_at: String!

  events: [DepositOrderEvent]!
}

type DepositOrderEvent {
  user_id: ID!
  order_id: ID!
  status: DepositStatus!
  amount: Float!
  memo: String!
  time: String!
}

enum OrderSide {
  UNSPECIFIED
  BUY
  SELL
}

enum OrderType {
  UNSPECIFIED
  LIMIT
  MARKET
}
enum OrderStatus {
  UNSPECIFIED
  NEW
  PENN
  CANCELED
  FILLED
  REJECTED
}

type SpotOrder {
  id: ID!
  user_id: ID!
  created_at: String!
  updated_at: String!

  symbol: String!
  price: Float!
  quantity: Float!
  side: OrderSide!
  type: OrderType!
  status: OrderStatus!
  memo: String!
}

type SpotOrderEvent {
  user_id: ID!
  order_id: ID!
  time: String!

  symbol: String!
  quantity: Float!
  side: OrderSide!
  type: OrderType!
  status: OrderStatus!
  price: Float!
  memo: String!
}

type SpotPosition {
  id: ID!
  user_id: ID!
  created_at: String!
  updated_at: String!

  symbol: String!
  side: OrderSide!
  quantity: Float!

  order_id: ID!
  price: Float!
  fee: Float!
  open_quantity: Float!
}

type SpotPositionClosed {
  id: ID!
  user_id: ID!
  created_at: String!

  symbol: String!
  side: OrderSide!
  quantity: Float!

  open_order_id: ID!
  open_price: Float!
  open_fee: Float!

  close_order_id: ID!
  close_price: Float!
  close_fee: Float!
}

type AggTradeData {
  event_type: String!
  event_time: Uint64!
  symbol: String!

  price: Float!
  quantity: Float!
  transaction_time: Uint64!
  is_sell: Boolean!
}

type KlineData {
  event_type: String!
  event_time: Uint64!
  symbol: String!

  kline: Kline!
}

type Kline {
  start_time: Uint64!
  end_time: Uint64!
  symbol: String!
  interval: String!
  open: String!
  close: String!
  high: String!
  low: String!
}

type DepthData {
  bids: [[String!]]!
  asks: [[String!]]!
}
